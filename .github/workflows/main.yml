name: "Terraform action moviechannel-ui"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  id-token: write # This is required for aws oidc connections (Try 4)
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: ${{ secrets.AWS_OIDC_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: "true" ##default

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
      #   with:
      #     mask-password: "true" #default
      #     registry-type: private #default
      #     # http-proxy: "http://companydomain.com:3128"
      #
      # - name: Build moviechannel-ui repository
      #   uses: int128/create-ecr-repository-action@v1
      #   id: moviechannel-ui-ecr
      #   with:
      #     repository: moviechannel-ui #name of repo
      # - name: Build, tags, and push img to ECR
      #   id: build-image
      #   env:
      #     AWS_IMAGE_TAG: ${{github.sha}} #commit id on git => ka=> tag identifier
      #   run: |
      #     docker build -t ${{steps.ecr.outputs.repository-uri}}:$AWS_IMAGE_TAG .
      #     docker push ${{steps.ecr.outputs.repository-uri}}:$AWS_IMAGE_TAG
      #     echo "IMAGE=${{steps.ecr.outputs.repository-uri}}:$AWS_IMAGE_TAG" >> $GITHUB_ENV
      #
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3
      #   with:
      #     terraform_version: 1.8.0
      #     # working-directory: ./terraform

      - name: Terraform fmt
        id: fmt
        # working-directory: ./terraform
        run: terraform fmt -check ./terraform
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: ./terraform
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: >
          terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" 
          -backend-config="key=${AWS_BUCKET_KEY_NAME}" 
          -backend-config="region=${AWS_REGION}"

      # - name: Terraform Destroy
      #   id: destroy
      #   working-directory: ./terraform
      #   run: terraform destroy -auto-approve -input=false
      #   env:
      #     TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'

      - name: Terraform Run
        id: run
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        id: status
        working-directory: ./terraform
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_REPO: https://github.com/AungMawMaw/moviechannel-ui
          TF_VAR_PAT: ${{secrets.PAT}}

      # - name: Terraform Destroy
      #   id: destroy
      #   working-directory: ./terraform
      #   run: terraform destroy -auto-approve -input=false
      #   env:
      #     TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      #     TF_VAR_image_tag: ${{ github.sha }}
